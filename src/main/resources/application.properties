server.port=8900
server.url=http://localhost:${server.port:8900}
version=1.0.11
hibernate_log=error

logging.level.root=WARN
logging.level.net.tospay=TRACE
spring.profiles.active=${PROFILE:uat}
profile=${spring.profiles.active}
spring.http.log-request-details=true
# Logging pattern for the console
logging.pattern.console="%d{yyyy-MM-dd HH:mm:ss} %L %logger{36} %p- %msg%n"
logging.pattern.file="%d{yyyy-MM-dd } [%thread] %-5level %L %logger{36} %p- %msg%n"
appender.file.layout.type=JsonLayout
appender.console.layout.type=JsonLayout
logging.file=app.log

sentry.DSN=http://345ab3d6ad1d4f289201d38b511d18a4@64.227.36.56:9000/4?environment=${profile}&release=${version}&stacktrace.app.packages=net.tospay.transaction
sentry.ENVIRONMENT=${profile}
sentry.RELEASE=${version}
sentry.stacktrace.app.packages=net.tospay.transaction




#SSL configuration
#See reference for more info
#https://www.thomasvitale.com/https-spring-boot-ssl-certificate/
# you can create SSL cert as below:
#keytool -genkeypair -alias tomcat -keyalg RSA -keysize 2048 -keystore client-certs.jks -validity 3650
#You can extract the certificate from keystore as
#keytool -export -keystore client-certs.jks -alias tomcat -file my-vas-cert.crt
#TO import cert to JRE - Allows JDK to trust client certs
#keytool -importcert -file my-vas-cert.crt -alias tomcat -keystore $JDK_HOME/jre/lib/security/cacerts
# Tell Spring Security to require requests over HTTPS
#security.require-ssl: false
#Enable or disable SSL. This also enables REST templates to use SSL
server.ssl.enabled=false
# The format used for the keystore e.g PKCS12,jks
#server.ssl.key-store-type: JKS
server.ssl.key-store-type=JKS
server.ssl.cer=classpath:client.transaction_service_api.cer
# The password used to open the keystore certificate
server.ssl.key-store-password=tospay
# Require client authentication: Options are want - one way SSL,need - two way SSL
server.ssl.client-auth=want

spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)


spring.jpa.properties.hibernate.dialect=net.tospay.transaction.configs.CustomPostgreSQLDialect
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL95Dialect
#spring.datasource.url=jdbc:postgresql://165.22.113.184:26000/transaction_service?ssl=true&sslmode=require&sslrootcert=~ca.crt&sslkey=E:\\certs\\card_service\\client.card_service_api.key.pk8&sslcert=E:\\certs\\card_service\\client.card_service_api.crt
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#maximum number of milliseconds that a client will wait for a connection
spring.datasource.hikari.connection-timeout = 20000 
#minimum number of idle connections maintained by HikariCP in a connection pool
spring.datasource.hikari.minimum-idle= 10 
#maximum pool size
spring.datasource.hikari.maximum-pool-size=10 
#maximum idle time for connection
spring.datasource.hikari.idle-timeout=10000 
# maximum lifetime in milliseconds of a connection in the pool after it is closed.
spring.datasource.hikari.max-lifetime=1000 
#default auto-commit behavior
spring.datasource.hikari.auto-commit=true 
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.generate_statistics=false
# basic log level for all messages
spring.jpa.show-sql=true
logging.level.org.hibernate.tool.hbm2ddl=${hibernate_log:info}
log4j.logger.org.hibernate=${hibernate_log:info}
# SQL statements and parameters
logging.level.org.hibernate=${hibernate_log:info}
logging.level.org.hibernate.SQL=${hibernate_log:info}
logging.level.org.hibernate.type=${hibernate_log:info}
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=${hibernate_log:info}
#spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
logging.level.org.springframework.jdbc.core.JdbcTemplate=${hibernate_log:info}
logging.level.org.springframework.jdbc.core.StatementCreatorUtils=${hibernate_log:info}
spring.jpa.open-in-view=false
spring.jackson.deserialization.fail-on-unknown-properties=false
jdbc.ssl.mode=require
jdbc.ssl.state=true
jdbc.sslrootcert=classpath:certs/${profile}/ca.crt
jdbc.sslcert=classpath:certs/${profile}/client.transactions_api.crt
jdbc.sslkey=classpath:certs/${profile}/client.transactions_api.key.pk8
#jdbc.datasource.url=jdbc:postgresql://172.16.5.27:26000/transactions_db
jdbc.driverClass=org.postgresql.Driver



auth.url.tokenize=${auth.url}/api/v3/user/validate/tokenize
auth.account.info.id.url=${auth.url}/api/v3/account/info/id
auth.account.info.email.url=${auth.url}/api/v3/account/info/email
auth.account.info.phone.url=${auth.url}/api/v3/account/info/phone
auth.hash.url=${auth.url}/api/v3/partner/create/hash

mobilepay.url=${mobile.url}/api/v1/transfer/execute
walletpay.url=${wallet.url}/api/v1/transfer/execute
cardpay.url=${card.url}/api/v1/payments/pay
bankpay.url=${bank.url}/api/v1/transaction  
STORE_PAY_URLS={MOBILE:'${mobilepay.url}',WALLET:'${walletpay.url}',BANK:'${bankpay.url}',CARD:'${cardpay.url}'}

mobilepay.status.url=${mobile.url}/api/v1/transaction/fetch/:id
cardpay.status.url=${card.url}/api/v1/transaction/fetch/:id
bankpay.status.url=${bank.url}/api/v1/transaction/fetch/:id
STORE_STATUS_URLS={MOBILE:'${mobilepay.status.url}',BANK:'${bankpay.status.url}',CARD:'${cardpay.status.url}'}

walletpay.account.url=${wallet.url}/api/v1/account/fetch/{id}/{type}

transaction_limits.url =${wallet.url}/api/v1/account-config/fetch/{id}/{type}/{sub_type}
location_limits.url =http://10.22.28.69:7017/api/v1/agents/coordinates/{id}
location_limits.enable =false






invoicepay.url=http://secure.benkinet.com:9200/api/v1/invoice/update
splitpay.url=http://secure.benkinet.com:9200/api/v1/split/update
paymentpay.url=http://secure.benkinet.com:9200/api/v1/payments/update
settlement.url=http://157.245.41.238/api/v1/settlement
reversal.callback.url=http://157.245.41.238/api/v1/reversal/callback
numbergenerator.transaction.url=http://secure.benkinet.com:9000/api/v1/generate/transaction
commission.url=http://10.22.28.65:8000/api/v1/commission/compute
spring.jackson.deserialization.USE_BIG_DECIMAL_FOR_FLOATS=true
spring.jackson.deserialization.USE_BIG_INTEGER_FOR_INTS=true
spring.jackson.parser.ALLOW_NUMERIC_LEADING_ZEROS=true
spring.jackson.core.json.ALLOW_LEADING_ZEROS_FOR_NUMBERS=true
spring.http.converters.preferred-json-mapper=jackson
#https://taar.tospay.net/api/v1/transfer-notify
notify.transfer.url=http://172.16.5.14/api/v1/notification/create
cron.job.autoreversal=0 0/5 * * * *
cron.job.asyncTransactionStatusCheck.period=90
cron.job.asyncTransactionStatusCheck=0/${cron.job.asyncTransactionStatusCheck.period} * * * * *
cron.job.report=0 59 23 * * * 
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG
logging.level.org.springframework.web.client.RestTemplate=info
log4j.logger.org.springframework.web.client=info
logging.level.org.apache.http=info
logging.level.httpclient.wire=info

#/actuator/httptrace
management.endpoints.web.exposure.include=httptrace,*

mail.url=https://taar.tospay.net/api/v1/send/email-attachment

license.publish.url =http://30548a63.ngrok.io/api/v1/publish/client 

report.statement=classpath:transaction_statement.jrxml
report.statement_logo=classpath:images/logo.png


#JAEGER_ENDPOINT= 10.22.28.72
#mml.tospay.net
JAEGER_REPORTER_LOG_SPANS= true
JAEGER_AGENT_HOST=10.22.28.72
JAEGER_AGENT_PORT=6831
#JAEGER_SAMPLER_MANAGER_HOST_PORT=10.22.28.72:5778


#Comment the below property for the Swagger page to work again
#server.servlet.contextPath=/springfox

logging.level.web=TRACE
logging.level.org.springframework.web=TRACE

partnerinfo_email =