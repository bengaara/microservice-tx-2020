server.port=8900
spring.profiles.active=dev
logging.level.root=INFO
# Logging pattern for the console
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %logger{36} %p - %msg%n
logging.pattern.file="%d{yyyy-MM-dd } [%thread] %-5level %logger{36} %p- %msg%n"
logging.file=app.log
#SSL configuration
#See reference for more info
#https://www.thomasvitale.com/https-spring-boot-ssl-certificate/
# you can create SSL cert as below:
#keytool -genkeypair -alias tomcat -keyalg RSA -keysize 2048 -keystore client-certs.jks -validity 3650
#You can extract the certificate from keystore as
#keytool -export -keystore client-certs.jks -alias tomcat -file my-vas-cert.crt
#TO import cert to JRE - Allows JDK to trust client certs
#keytool -importcert -file my-vas-cert.crt -alias tomcat -keystore $JDK_HOME/jre/lib/security/cacerts
# Tell Spring Security to require requests over HTTPS
#security.require-ssl: false
#Enable or disable SSL. This also enables REST templates to use SSL
server.ssl.enabled:false
# The format used for the keystore e.g PKCS12,jks
#server.ssl.key-store-type: JKS
server.ssl.key-store-type:JKS
server.ssl.cer:classpath:client.transaction_service_api.cer
# The password used to open the keystore certificate
server.ssl.key-store-password:tospay
# The alias mapped to the certificate
server.ssl.key-alias:coop_tsp
# Require client authentication: Options are want - one way SSL,need - two way SSL
server.ssl.client-auth:want
#Coop API base url
coop.baseurl=https://developer.co-opbank.co.ke:8243
#Coop callback url -- local
coop.callback.url=https://developer.co-opbank.co.ke:8243
#Coop consumer key
coop.consumer.key=S04Fbo7WZpZLNb4eavUQcbXYRQAa
#Coop consumer secret
coop.consumer.secret=zkQC8PzxdcEgRDe7PHxQZvCikLga
callback.address=https://a707c49d.ngrok.io
jdbc.ssl.mode=require
jdbc.ssl.state=true
jdbc.sslrootcert=classpath:ca.crt
jdbc.sslcert=classpath:client.transaction_service_api.crt
jdbc.sslkey=classpath:client.transaction_service_api.key.pk8
jdbc.datasource.url=jdbc:postgresql://165.22.113.184:26000/transaction_service
jdbc.driverClass=org.hibernate.dialect.PostgreSQL95Dialect
jdbc.username=transaction_service_api
spring.jpa.properties.hibernate.dialect=net.tospay.transaction.configs.CustomPostgreSQLDialect
#spring.datasource.url=jdbc:postgresql://165.22.113.184:26000/transaction_service?ssl=true&sslmode=require&sslrootcert=~ca.crt&sslkey=E:\\certs\\card_service\\client.card_service_api.key.pk8&sslcert=E:\\certs\\card_service\\client.card_service_api.crt
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.datasource.username=transaction_service_api
spring.datasource.password=
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
topup.callback.url=https://ukash.tospay.net/api/v1/payment-callback
auth.url=https://auth.tospay.net/api/v3/user/validate/tokenize
mobilepay.url=https://hanti.tospay.net/api/v1/pay
charge.url=http://secure.benkinet.com:8500/api/v1/fetch/
numbergenerator.transaction.url=http://secure.benkinet.com:9000/api/v1/generate/transaction



